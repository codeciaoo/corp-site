# コミットメッセージ規約

## 1. 基本構造

```
<type>(<scope>): <subject>

<body>

<footer>
```

## 2. Type

- feat: 新機能の追加
- fix: バグ修正
- docs: ドキュメントのみの変更
- style: コードの意味に影響を与えない変更（スペース、フォーマット、セミコロンなど）
- refactor: バグ修正や機能追加のないコードの変更
- test: テストの追加・修正
- chore: ビルドプロセスやライブラリの変更、その他の変更

## 3. Scope

- コミットの影響範囲を示す
- 省略可能
- 例：(ui), (api), (auth), (core)

## 4. Subject

- 変更内容を簡潔に要約
- 命令形で記述（"変更" ではなく "変更する"）
- 末尾にピリオドを付けない
- 50文字以内

## 5. Body

- 変更の詳細な説明
- 改行で段落分け
- なぜその変更が必要だったのかの説明
- 72文字で改行

## 6. Footer

- Breaking Changes の記述
- Issue への参照
- 関連するPRへの参照

## 7. コミットメッセージの例

### 機能追加の例
```
feat(projects): プロジェクト一覧ページの実装

- プロジェクトカードコンポーネントの作成
- ページネーション機能の追加
- フィルタリング機能の実装

Closes #123
```

### バグ修正の例
```
fix(auth): ログイン時のリダイレクトが機能しない問題を修正

- リダイレクトURLのエンコーディングを修正
- エラーハンドリングを追加

Fixes #456
```

### リファクタリングの例
```
refactor(core): APIクライアントの実装を改善

- 型安全性の向上
- エラーハンドリングの統一
- テスト容易性の改善

BREAKING CHANGE: APIクライアントのインターフェースを変更
```

### ドキュメントの例
```
docs(readme): インストール手順の更新

- 環境構築手順の詳細化
- トラブルシューティングセクションの追加
```

## 8. コミットメッセージのベストプラクティス

### 1. 一貫性
- 同じ種類の変更には同じtypeを使用
- 同じスコープには同じ表記を使用
- チーム内で統一された形式を維持

### 2. 明確性
- 何を変更したのかが明確に分かる
- なぜ変更したのかの説明を含める
- 技術的な詳細を適切に記述

### 3. 追跡可能性
- 関連するIssueやPRへの参照を含める
- Breaking Changesを明確に記述
- 影響範囲を明示

### 4. レビュー容易性
- 変更内容が理解しやすい
- コードレビューの効率化
- 履歴の追跡が容易

## 9. 注意事項

### 避けるべきこと
- 曖昧な説明
- 長すぎるsubject
- 複数の変更を1つのコミットに含める
- 文法的に不正確な文

### 推奨されること
- 単一の責任原則に従ったコミット
- 明確で簡潔な説明
- 関連する変更のグループ化
- 適切な粒度での分割

## 10. コミットの粒度

### 機能単位
- 1つの機能につき1つのコミット
- テストも含める
- ドキュメントの更新も含める

### バグ修正
- 修正内容と修正理由を含める
- テストケースの追加
- 再現手順の文書化

### リファクタリング
- 変更の目的を明確に
- 影響範囲の説明
- パフォーマンスへの影響

# プルリクエスト規約

## 1. タイトル形式

```
[Type] 変更内容の要約
```

### Type の種類
- Feature: 新機能の追加
- Fix: バグ修正
- Refactor: リファクタリング
- Docs: ドキュメントの変更
- Test: テストの追加・修正
- Style: コードスタイルの変更
- Chore: その他の変更

## 2. 説明テンプレート

```markdown
## 変更内容
- 変更点1
- 変更点2
- 変更点3

## 変更理由
変更が必要な背景や目的を説明

## テスト項目
- [ ] ユニットテスト
- [ ] E2Eテスト
- [ ] アクセシビリティテスト
- [ ] レスポンシブ動作確認
- [ ] クロスブラウザテスト

## スクリーンショット
変更箇所のスクリーンショット（UI変更時）

## 関連Issue
Closes #123
```

## 3. レビュー基準

### 1. 機能面
- 仕様との整合性
- エッジケースの考慮
- エラーハンドリング
- パフォーマンスへの影響

### 2. コード品質
- コーディング規約への準拠
- テストカバレッジ
- 型安全性
- コメントの適切さ

### 3. アクセシビリティ
- WAI-ARIAの適切な使用
- キーボード操作
- スクリーンリーダー対応
- カラーコントラスト

### 4. セキュリティ
- 脆弱性の有無
- 認証・認可の適切な実装
- データの適切な処理
- エラーメッセージの適切な表示

## 4. レビュープロセス

### 1. 提出前のチェックリスト
- [ ] ブランチが最新のmainから作成されている
- [ ] コンフリクトが解消されている
- [ ] すべてのテストが通過している
- [ ] リンター/フォーマッターが実行されている
- [ ] 不要なコメントやデバッグコードが削除されている

### 2. レビュー依頼時の注意点
- 変更の概要を明確に説明
- レビュアーへの特記事項を記載
- テスト結果のエビデンスを添付
- 必要に応じてデモ動画を添付

### 3. レビュー中の対応
- レビューコメントへの迅速な対応
- 議論が必要な点の明確化
- 修正内容の説明
- 再テストの実施

### 4. マージ前の確認事項
- [ ] すべてのレビューコメントが解決済み
- [ ] CI/CDパイプラインが通過
- [ ] 最新のmainとのコンフリクトがない
- [ ] ドキュメントが更新されている

## 5. コードレビューのガイドライン

### 1. レビュアーの責任
- コードの品質確認
- セキュリティ上の問題の指摘
- パフォーマンスの考慮
- ベストプラクティスの提案

### 2. レビューコメントの書き方
- 建設的な提案を心がける
- 具体的な改善案を提示
- 参考資料へのリンクを含める
- 優先度を明確にする

### 3. フィードバックの受け方
- オープンな議論を心がける
- 提案に対する根拠の説明
- 代替案の提示
- 迅速な対応

## 6. マージ戦略

### 1. ブランチ戦略
- feature/: 新機能開発用
- fix/: バグ修正用
- refactor/: リファクタリング用
- docs/: ドキュメント更新用

### 2. マージ方法
- Squash and merge: 履歴を整理する場合
- Merge commit: 履歴を保持する場合
- Rebase: 直線的な履歴が必要な場合

### 3. マージ後の対応
- ブランチの削除
- デプロイの確認
- 関連Issueのクローズ
- チームへの通知

## 7. CI/CD との連携

### 1. 自動チェック項目
- TypeScriptの型チェック
- ESLintによる静的解析
- Prettierによるフォーマット
- ユニットテストの実行
- E2Eテストの実行

### 2. デプロイプレビュー
- プレビュー環境へのデプロイ
- 動作確認用URLの提供
- パフォーマンス計測
- アクセシビリティチェック

### 3. 本番デプロイ
- デプロイ計画の確認
- リリースノートの作成
- ロールバック手順の確認
- モニタリングの設定

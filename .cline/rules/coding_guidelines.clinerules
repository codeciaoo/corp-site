# コーディング規約

## 基本規約

- ESLint/Prettier の標準的なルールに準拠
- コンポーネント設計は Astro と React の公式ガイドラインに従う
- 関数やコンポーネントには適切なコメントを含める

## コンポーネント設計の基本原則

1. 単一責任の原則
   - 各コンポーネントは1つの責任のみを持つ
   - 複雑な機能は小さなコンポーネントに分割

2. Props の型定義
   - すべての Props は明示的な型定義を持つ
   - 必須/オプショナルを適切に区別

```typescript
interface ComponentProps {
  required: string;
  optional?: number;
}
```

3. コメント規約
   - コンポーネントの概要説明
   - 複雑なロジックの説明
   - Props の説明
   - 副作用の説明

```typescript
/**
 * @component ComponentName
 * @description コンポーネントの説明
 *
 * @param {string} prop1 - 説明
 * @param {number} [prop2] - オプショナルな prop の説明
 *
 * @example
 * <ComponentName prop1="value" prop2={42} />
 */
```

4. エラーハンドリング
   - try-catch による適切なエラー処理
   - ユーザーフレンドリーなエラーメッセージ
   - フォールバックUIの提供

5. パフォーマンス最適化
   - メモ化の適切な使用
   - 不要な再レンダリングの防止
   - 遅延ロードの活用

## コードスタイル

1. 命名規則
   - コンポーネント: PascalCase
   - 関数: camelCase
   - 定数: UPPER_SNAKE_CASE
   - ファイル名: コンポーネントと同じ名前

2. インポート順序
   - React/Astro関連
   - 外部ライブラリ
   - 内部コンポーネント
   - 型定義
   - スタイル

3. コンポーネントの構造
   - インポート
   - 型定義
   - 定数
   - ヘルパー関数
   - メインコンポーネント
   - エクスポート

## ベストプラクティス

1. 状態管理
   - ローカル状態は useState を使用
   - 複雑な状態は useReducer を検討
   - グローバル状態は必要な場合のみ

2. 副作用の管理
   - useEffect の依存配列を適切に設定
   - クリーンアップ関数の実装
   - 無限ループの防止

3. イベントハンドリング
   - イベントハンドラーは handleEvent の命名
   - イベント型の明示的な指定
   - デバウンス/スロットルの適切な使用

4. アクセシビリティ
   - セマンティックなHTML
   - ARIA属性の適切な使用
   - キーボード操作のサポート
   - スクリーンリーダー対応

5. レスポンシブデザイン
   - モバイルファースト
   - Tailwindのブレークポイント活用
   - コンテンツの適切な配置

## コードレビュー基準

1. 機能面
   - 仕様との整合性
   - エッジケースの考慮
   - エラーハンドリング

2. 技術面
   - パフォーマンス
   - 型安全性
   - テストカバレッジ

3. 保守性
   - コードの可読性
   - 適切な分割
   - 再利用性
